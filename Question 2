;; * * * * * * * * * * * * *     
;; Jonah Jay
;; CS 115 Fall 2020    
;; Assignment 08, Question 2    
;; * * * * * * * * * * * * *

;; * * * * * * * * * * * * *
;; Question 2a)
;; * * * * * * * * * * * * *

;; (nth-column n lst) consumes a matrix or a list of list of Int and a natural number
;; and produces a list of Int
;; nth-column: Nat (listof (listof Int)) -> (listof int)
;; Requires:matrix to be none empty 
;; Example;
(check-expect (nth-column 1 (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12)))
              (list 2 6 10))
(check-expect (nth-column 0 (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12)))
              (list 1 5 9))

(define (nth-column n lst)
 (map (lambda (lst) (list-ref lst n)) lst))

;; Tests
(check-expect (nth-column 2 (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12)))
              (list 3 7 11))
(check-expect (nth-column 3 (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12)))
              (list 4 8 12))

;; * * * * * * * * * * * * *
;; Question 2b)
;; * * * * * * * * * * * * *

;; (matrix-max matrix) consumes a matrix or a list of a list of Int 
;; and produces a Int which is the max value in the entire matrix
;; matrix-max: (listof (listof Int)) -> int
;; Requires: matrix to be none empty 
;; Example;
(check-expect (matrix-max (list (list 3 -1) (list -7 -4))) 3)
(check-expect (matrix-max (list (list 3 1) (list 11 2))) 11)

(define (matrix-max matrix)
  (foldr max (first (first matrix)) (map (lambda (lst) (foldr max (first lst) lst)) matrix)))

;; Tests
(check-expect (matrix-max (list (list -3 -10) (list -9 -4))) -3)
(check-expect (matrix-max (list (list 0 -10) (list -9 -4))) 0)
(check-expect (matrix-max (list (list 13 10) (list 19 4))) 19)


;; * * * * * * * * * * * * *
;; Question 2c)
;; * * * * * * * * * * * * *

;; (matrix-map f lst) consumes a matrix or a list of a list of Int 
;; and a function and produces the matrix
;; where every element is the result of applying f on every element
;; matrix-map: (listof (listof Int)) f -> (listof (listof Int))
;; Requires: matrix to be none empty 
;; Example;
(check-expect (matrix-map sqr (list (list 3 -1) (list -7 -4)))
              (list (list 9 1) (list 49 16)))
(check-expect (matrix-map sqrt (list (list 4 9) (list 36 144)))
              (list (list 2 3) (list 6 12)))


(define (matrix-map f lst)
  (map (lambda (row) (map f row)) lst))

;; Tests
(check-expect (matrix-map sqr (list (list 5) (list 4)))
              (list (list 25) (list 16)))
(check-expect (matrix-map sqr (list (list 1 1 1) (list 1 1 1)))
              (list (list 1 1 1) (list 1 1 1)))
(check-expect (matrix-map sqr (list (list 1 2 3) (list 4 5 6)))
              (list (list 1 4 9) (list 16 25 36)))
(check-expect (matrix-map sqrt (list (list 1 1 1) (list 1 1 1)))
              (list (list 1 1 1) (list 1 1 1)))
